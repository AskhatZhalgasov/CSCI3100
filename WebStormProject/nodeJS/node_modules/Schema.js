import { number, string } from 'prop-types';

// eslint-disable-next-line import/no-unresolved
const mongoose = require('mongoose');

const Schema = mongoose.Schema();

const pizzaSchema = mongoose.Schema({
    _id: mongoose.Schema.Types.ObjectId,
    name: { type: String, required: true },
    price: { type: Number, required: true },
    pizzaImage: { type: String, required: true }
});

module.exports = mongoose.model('Pizza', pizzaSchema);

// const ShopCartSchema = mongoose.Schema({
//     _id: mongoose.Schema.Types.ObjectId,
//     productSelect:{
//     product: { type: mongoose.Schema.Types.ObjectId, ref: 'Pizza'},
//     quantity: { type: Number, default: 1 }},
//     totalPrice: {type: Number, default: 0}
// });
//
// module.exports = mongoose.model('ShoppingCart', ShopCartSchema);

const orderSchema = mongoose.Schema({
    _id: mongoose.Schema.Types.ObjectId,
    productSelect: {
        product: { type: mongoose.Schema.Types.ObjectId, ref: 'Pizza', required: true },
        quantity: { type: Number, default: 1 }
    },
    // eslint-disable-next-line no-undef
    address: { type: string },
    totalPrice: { type: Number, default: 0 }
});


module.exports = mongoose.model('Order', orderSchema);


const userSchema = mongoose.Schema({
    _id: mongoose.Schema.Types.ObjectId,
    name: {
        type: string,
        required: true
    },
    orderHistory: {

        orderId: { type: Schema.Types.ObjectId, ref: 'Order' }
    },
    shoppingCart: { type: Schema.Types.ObjectId, ref: 'ShoppingCart' },
    address: {
        type: string,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    password: { type: String, required: true },

    phone: { type: number, required: true }
});
module.exports = mongoose.model('User', userSchema);
